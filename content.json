{"meta":{"title":"青山白云梦","subtitle":null,"description":"黄超杰的web笔记","author":"黄超杰","url":"http://yoursite.com"},"pages":[{"title":"关于我","date":"2018-12-24T16:00:00.000Z","updated":"2018-12-25T12:56:41.633Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"关于我我是黄超杰，一位独立的IT培训师、码匠、编程传道者。通过咨询、培训、以及项目协作研究等，帮助IT公司、科研院所、大学以及个人理解和应用企业级应用构建语言、工具、思想和方法。 长期研究和使用java编程技术、web技术，对于与编程相关的软件开发思想和方法学，包括设计模式、重构、测试等，具有深刻的认知。 拥有10年以上编程经验，技术全栈，后台、前端、移动端都有丰富的项目经验。曾供职与腾讯、美国莱斯龙公司，参加过中信银行网银后台开发，日本软银邮箱系统的前端开发，腾讯TOS安卓系统的开发。 我住在武汉，临近东湖。工作以外，我的其他爱好包括钓鱼和弹电吉他。 联系我Wechat：hchaojieGitHub：hchaojieEmail：cirohuang&lt;#&gt;qq.com"}],"posts":[{"title":"使用ssh连接github","slug":"connecting-to-github-with-ssh","date":"2018-12-28T16:00:00.000Z","updated":"2018-12-29T15:53:27.001Z","comments":true,"path":"2018/12/29/connecting-to-github-with-ssh/","link":"","permalink":"http://yoursite.com/2018/12/29/connecting-to-github-with-ssh/","excerpt":"使用ssh key的好处：不需要每次提交的时候都输入用户名密码。","text":"使用ssh key的好处：不需要每次提交的时候都输入用户名密码。 基本步骤 在你的电脑上生成一个ssh key。如何在本机上生成ssh key取决于你的git客户端，我的系统是windows10，使用的是tortoisegit。如果你用的是github自家的github desktop，可以参考官方步骤。 安装了tortoisegit后，它自带了两个ssh相关的程序：puttygen和pageant。可以在开始菜单的tortoisegit里面找到他们。puttygen用来生成ssh key。pageant用来管理key和作为一个ssh连接的代理。运行puttygen程序即可生成key。生成以’ssh-rsa’开头的公钥字符串。将其复制、后面需要添加到github网站。同时将私钥保存成pagent使用的ppk文件。 再运行pageant添加代理。运行pageant，将上一步保存的ppk私钥文件添加到ssh-agent。（ssh连接代理） 在github网站后台将ssh key关联到你的账户。 使用ssh形式的url连接github。github仓库的地址有两种形式：https: https://github.com/hchaojie/xxx.gitssh: `git@github.com:hchaojie/xxx.git`不要使用https的。","categories":[{"name":"开发工具","slug":"开发工具","permalink":"http://yoursite.com/categories/开发工具/"}],"tags":[{"name":"github","slug":"github","permalink":"http://yoursite.com/tags/github/"},{"name":"ssh","slug":"ssh","permalink":"http://yoursite.com/tags/ssh/"}]},{"title":"如何根据「平级结构」的集合构建「树形结构」","slug":"build-a-tree-from-a-flat-structure","date":"2018-12-27T16:00:00.000Z","updated":"2018-12-29T15:55:54.277Z","comments":true,"path":"2018/12/28/build-a-tree-from-a-flat-structure/","link":"","permalink":"http://yoursite.com/2018/12/28/build-a-tree-from-a-flat-structure/","excerpt":"在数据库设计的一些场景里面，我们经常把一些树形结构的数据设计成平级结构。比如，菜单是一个典型的树形结构。每个菜单有一个父菜单，同时可以有多个子菜单。设计菜单数据库的时候，我们会给每个菜单定义一个parentId的字段，用来指定它的父菜单。一个parentId字段就可以表达菜单的父子关系了。因为数据库都是行列式的存储，这样的数据就相当于平级结构。而通过parentId这样的设计，我们就可以使用平级结构的数据来存储树状结构的数据。这种设计很常用，比如一个电商里面的分类表，一个OA系统里面的组织结构表，都是类似的树形结构。 存储数据的时候，我们会把树形结构的数据转化成平级结构。反过来，当我们查询数据的时候，通常又要把平级结构转回树状结构。比如很多前端UI框架里面，构建一个树组件的时候，都需要提供一个树形结构的数据。 如何高效的把平级结构数据转化成树形结构呢？","text":"在数据库设计的一些场景里面，我们经常把一些树形结构的数据设计成平级结构。比如，菜单是一个典型的树形结构。每个菜单有一个父菜单，同时可以有多个子菜单。设计菜单数据库的时候，我们会给每个菜单定义一个parentId的字段，用来指定它的父菜单。一个parentId字段就可以表达菜单的父子关系了。因为数据库都是行列式的存储，这样的数据就相当于平级结构。而通过parentId这样的设计，我们就可以使用平级结构的数据来存储树状结构的数据。这种设计很常用，比如一个电商里面的分类表，一个OA系统里面的组织结构表，都是类似的树形结构。 存储数据的时候，我们会把树形结构的数据转化成平级结构。反过来，当我们查询数据的时候，通常又要把平级结构转回树状结构。比如很多前端UI框架里面，构建一个树组件的时候，都需要提供一个树形结构的数据。 如何高效的把平级结构数据转化成树形结构呢？ 背景在数据库设计的一些场景里面，我们经常把一些树形结构的数据设计成平级结构。比如，菜单是一个典型的树形结构。每个菜单有一个父菜单，同时可以有多个子菜单。设计菜单数据库的时候，我们会给每个菜单定义一个parentId的字段，用来指定它的父菜单。一个parentId字段就可以表达菜单的父子关系了。因为数据库都是行列式的存储，这样的数据就相当于平级结构。而通过parentId这样的设计，我们就可以使用平级结构的数据来存储树状结构的数据。这种设计很常用，比如一个电商里面的分类表，一个OA系统里面的组织结构表，都是类似的树形结构。 存储数据的时候，我们会把树形结构的数据转化成平级结构。反过来，当我们查询数据的时候，通常又要把平级结构转回树状结构。比如很多前端UI框架里面，构建一个树组件的时候，都需要提供一个树形结构的数据：12345678&#123; id: 1, name: &apos;根菜单&apos;, children: [ &#123;id: 11, name: &apos;子菜单一&apos;&#125;, &#123;id: 12, name: &apos;子菜单二&apos;&#125;, ]&#125; 而数据库里面的数据是这样的： id name parentId 1 根菜单 null 11 子菜单一 1 12 子菜单二 1 这个怎么做呢？ 解决方式菜单类：12345678class Menu &#123; private Integer id; private String name; private Integer parentId; private List&lt;Menu&gt; children; // getter and setter&#125; 构建步骤：1234567891011121314151617181920212223242526272829/** 时间复杂度：O(n) */Menu buildTree(List&lt;Menu&gt; menus) &#123; Menu root = null; Map&lt;Integer, Menu&gt; lookup = new HashMap&lt;&gt;(); // 查找表，可以方便地根据id查询对应元素 for (Menu m : menus) &#123; lookup.put(m.getId(), m); &#125; // 将每个节点添加到它对应的父节点的children for (Menu m : menus) &#123; Menu parent = map.get(m.getParentId()); if (parent != null) &#123; parent.getChildren().add(m); &#125; &#125; // 返回根节点。通过它的childrend就可以遍历到所有的子节点。 for (Menu m : menus) &#123; if (m.getParentId == null) &#123; root = m; break; &#125; &#125; return root;&#125;","categories":[{"name":"后台开发","slug":"后台开发","permalink":"http://yoursite.com/categories/后台开发/"}],"tags":[{"name":"菜单设计","slug":"菜单设计","permalink":"http://yoursite.com/tags/菜单设计/"},{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/数据库/"}]},{"title":"使用hexo在github pages上面创建个人博客","slug":"build-blog-with-hexo-on-github-pages","date":"2018-12-24T16:00:00.000Z","updated":"2018-12-25T09:09:16.109Z","comments":true,"path":"2018/12/25/build-blog-with-hexo-on-github-pages/","link":"","permalink":"http://yoursite.com/2018/12/25/build-blog-with-hexo-on-github-pages/","excerpt":"流行的建站工具有三款： jekyll，基于ruby语言。 hugo，基于go语言。 hexo，基于node.js。 其中hexo在国内用得比较多，有大量的主题。查看github主页，提交最多的是一个台湾人，应该就是创始人了。","text":"流行的建站工具有三款： jekyll，基于ruby语言。 hugo，基于go语言。 hexo，基于node.js。 其中hexo在国内用得比较多，有大量的主题。查看github主页，提交最多的是一个台湾人，应该就是创始人了。 流行的建站工具有三款： jekyll，基于ruby语言。 hugo，基于go语言。 hexo，基于node.js。 其中hexo在国内用得比较多，有大量的主题。查看github主页，提交最多的是一个台湾人，应该就是创始人了。 前提 安装git(windows的话可以使用tortoise git) 安装node.js hexo安装和建站步骤参考官方文档 安装hexo 1npm install hexo-cli -g 建站 123hexo init hchaojie-blogcd hchaojie-blognpm install 生成静态页面 1hexo g 实际上是把&lt;项目根目录&gt;\\source\\_posts 里面的markdown格式生成了对应的html页面。生成的文件在&lt;项目根目录&gt;\\public文件夹里面。 本地运行1hexo server 可以通过地址http://localhost:4000来访问。 使用主题默认生成的页面比较丑，你可以到官网选择喜欢的主题：主题列表10个最受欢迎的主题hexo-theme-yiliahexo-theme-materialhexo-theme-material-x 我使用的是hexo-theme-yilia，使用步骤： 安装12cd themesgit clone https://github.com/litten/hexo-theme-yilia.git yilia 克隆完成之后，将&lt;项目根目录&gt;\\themes\\material里面的_config.template.yml复制一份并重命名为_config.yml。 配置修改&lt;项目根目录&gt;\\_config.yml 12# theme: landscape 这个是默认的主题，使用#号注释掉theme: material 使用hexo generate重新生成页面 错误处理这个主题的代码很久没有更新，安装的时候很可能出错。我安装的时候，报了一个错： 123456789D:\\code\\hchaojie-blog\\themes\\material\\layout\\_widget\\dnsprefetch.ejs:12 10| &lt;% &#125; %&gt; 11| &gt;&gt; 12| &lt;% if(theme.comment.use === &quot;changyan&quot;) &#123; %&gt; 13| &lt;link rel=&quot;dns-prefetch&quot; href=&quot;https://changyan.sohu.com&quot;/&gt; 14| &lt;% &#125; else if(theme.comment.use === &quot;livere&quot;) &#123; %&gt; 15| &lt;link rel=&quot;dns-prefetch&quot; href=&quot;https://cdn-city.livere.com&quot;/&gt;Cannot read property &apos;startsWith&apos; of null 找到dnsprefetch.ejs这个文件，看了一眼21行大概是theme.comment.use为空，只要修改&lt;&gt;项目根目录\\themes\\material\\_config.yml，给use变量设置一个空值即可。12comment: use: &apos;&apos; 发布到github网站前提：你需要有一个github账号。基本步骤：创建一个xxx.github.io的仓库，然后把你的静态页面放到仓库的根目录就可以了。其中xxx是你github的账号名。比如我的是hchaojie，那么我的仓库就是：hchaojie.github.io，我的个人博客访问地址就是https://hchaojie.github.io/ 也可以使用hexo的自动发布功能： 修改&lt;项目根目录&gt;\\_config.yml1234deploy: type: github repository: git@github.com:hchaojie/hchaojie.github.io.git branch: master 注意仓库路径是ssh形式的（以git@开头，而不是https@开头），并且要配置ssh key自动登陆。 每次文章更新后的发布步骤：123hexo cleanhexo generatehexo deploy","categories":[{"name":"前端开发","slug":"前端开发","permalink":"http://yoursite.com/categories/前端开发/"}],"tags":[{"name":"blog","slug":"blog","permalink":"http://yoursite.com/tags/blog/"},{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"github pages","slug":"github-pages","permalink":"http://yoursite.com/tags/github-pages/"}]}]}