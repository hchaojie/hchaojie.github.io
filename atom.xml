<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青山白云梦</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-29T15:53:27.001Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>黄超杰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用ssh连接github</title>
    <link href="http://yoursite.com/2018/12/29/connecting-to-github-with-ssh/"/>
    <id>http://yoursite.com/2018/12/29/connecting-to-github-with-ssh/</id>
    <published>2018-12-28T16:00:00.000Z</published>
    <updated>2018-12-29T15:53:27.001Z</updated>
    
    <content type="html"><![CDATA[<p>使用ssh key的好处：不需要每次提交的时候都输入用户名密码。</p><a id="more"></a><h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><ol><li>在你的电脑上生成一个ssh key。<br>如何在本机上生成ssh key取决于你的git客户端，我的系统是windows10，使用的是tortoisegit。<br>如果你用的是github自家的<a href="https://desktop.github.com/" target="_blank" rel="noopener">github desktop</a>，可以参考<a href="https://help.github.com/articles/connecting-to-github-with-ssh/" target="_blank" rel="noopener">官方步骤</a>。</li></ol><p>安装了tortoisegit后，它自带了两个ssh相关的程序：puttygen和pageant。可以在开始菜单的tortoisegit里面找到他们。puttygen用来生成ssh key。pageant用来管理key和作为一个ssh连接的代理。<br>运行puttygen程序即可生成key。生成以’ssh-rsa’开头的公钥字符串。将其复制、后面需要添加到github网站。<br>同时将私钥保存成pagent使用的ppk文件。</p><ol start="2"><li><p>再运行pageant添加代理。<br>运行pageant，将上一步保存的ppk私钥文件添加到ssh-agent。（ssh连接代理）</p></li><li><p>在github网站后台将ssh key关联到你的账户。</p></li><li>使用ssh形式的url连接github。<br>github仓库的地址有两种形式：<br>https: <code>https://github.com/hchaojie/xxx.git</code><br>ssh: <a href="mailto:`git@github.com" target="_blank" rel="noopener">`git@github.com</a>:hchaojie/xxx.git`<br>不要使用https的。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用ssh key的好处：不需要每次提交的时候都输入用户名密码。&lt;/p&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="ssh" scheme="http://yoursite.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>如何根据「平级结构」的集合构建「树形结构」</title>
    <link href="http://yoursite.com/2018/12/28/build-a-tree-from-a-flat-structure/"/>
    <id>http://yoursite.com/2018/12/28/build-a-tree-from-a-flat-structure/</id>
    <published>2018-12-27T16:00:00.000Z</published>
    <updated>2018-12-29T15:55:54.277Z</updated>
    
    <content type="html"><![CDATA[<p>在数据库设计的一些场景里面，我们经常把一些树形结构的数据设计成平级结构。比如，菜单是一个典型的树形结构。每个菜单有一个父菜单，同时可以有多个子菜单。设计菜单数据库的时候，我们会给每个菜单定义一个parentId的字段，用来指定它的父菜单。一个parentId字段就可以表达菜单的父子关系了。因为数据库都是行列式的存储，这样的数据就相当于平级结构。而通过parentId这样的设计，我们就可以使用平级结构的数据来存储树状结构的数据。这种设计很常用，比如一个电商里面的分类表，一个OA系统里面的组织结构表，都是类似的树形结构。</p><p>存储数据的时候，我们会把树形结构的数据转化成平级结构。反过来，当我们查询数据的时候，通常又要把平级结构转回树状结构。比如很多前端UI框架里面，构建一个树组件的时候，都需要提供一个树形结构的数据。</p><p>如何高效的把平级结构数据转化成树形结构呢？</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在数据库设计的一些场景里面，我们经常把一些树形结构的数据设计成平级结构。比如，菜单是一个典型的树形结构。每个菜单有一个父菜单，同时可以有多个子菜单。设计菜单数据库的时候，我们会给每个菜单定义一个parentId的字段，用来指定它的父菜单。一个parentId字段就可以表达菜单的父子关系了。因为数据库都是行列式的存储，这样的数据就相当于平级结构。而通过parentId这样的设计，我们就可以使用平级结构的数据来存储树状结构的数据。这种设计很常用，比如一个电商里面的分类表，一个OA系统里面的组织结构表，都是类似的树形结构。</p><p>存储数据的时候，我们会把树形结构的数据转化成平级结构。反过来，当我们查询数据的时候，通常又要把平级结构转回树状结构。比如很多前端UI框架里面，构建一个树组件的时候，都需要提供一个树形结构的数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    id: 1,</span><br><span class="line">    name: &apos;根菜单&apos;,</span><br><span class="line">    children: [</span><br><span class="line">        &#123;id: 11, name: &apos;子菜单一&apos;&#125;,</span><br><span class="line">        &#123;id: 12, name: &apos;子菜单二&apos;&#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而数据库里面的数据是这样的：</p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">name</th><th style="text-align:center">parentId</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">根菜单</td><td style="text-align:center">null</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">子菜单一</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">子菜单二</td><td style="text-align:center">1</td></tr></tbody></table><p>这个怎么做呢？</p><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>菜单类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Menu &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer parentId;</span><br><span class="line">    private List&lt;Menu&gt; children;</span><br><span class="line"></span><br><span class="line">    // getter and setter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>构建步骤：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/** 时间复杂度：O(n) */</span><br><span class="line">Menu buildTree(List&lt;Menu&gt; menus) &#123;</span><br><span class="line">    Menu root = null;</span><br><span class="line">    Map&lt;Integer, Menu&gt; lookup = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    // 查找表，可以方便地根据id查询对应元素</span><br><span class="line">    for (Menu m : menus) &#123;</span><br><span class="line">        lookup.put(m.getId(), m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 将每个节点添加到它对应的父节点的children</span><br><span class="line">    for (Menu m : menus) &#123;</span><br><span class="line">        Menu parent = map.get(m.getParentId());</span><br><span class="line"></span><br><span class="line">        if (parent != null) &#123;</span><br><span class="line">            parent.getChildren().add(m);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 返回根节点。通过它的childrend就可以遍历到所有的子节点。</span><br><span class="line">    for (Menu m : menus) &#123;</span><br><span class="line">        if (m.getParentId == null) &#123;</span><br><span class="line">            root = m;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在数据库设计的一些场景里面，我们经常把一些树形结构的数据设计成平级结构。比如，菜单是一个典型的树形结构。每个菜单有一个父菜单，同时可以有多个子菜单。设计菜单数据库的时候，我们会给每个菜单定义一个parentId的字段，用来指定它的父菜单。一个parentId字段就可以表达菜单的父子关系了。因为数据库都是行列式的存储，这样的数据就相当于平级结构。而通过parentId这样的设计，我们就可以使用平级结构的数据来存储树状结构的数据。这种设计很常用，比如一个电商里面的分类表，一个OA系统里面的组织结构表，都是类似的树形结构。&lt;/p&gt;
&lt;p&gt;存储数据的时候，我们会把树形结构的数据转化成平级结构。反过来，当我们查询数据的时候，通常又要把平级结构转回树状结构。比如很多前端UI框架里面，构建一个树组件的时候，都需要提供一个树形结构的数据。&lt;/p&gt;
&lt;p&gt;如何高效的把平级结构数据转化成树形结构呢？&lt;/p&gt;
    
    </summary>
    
      <category term="后台开发" scheme="http://yoursite.com/categories/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="菜单设计" scheme="http://yoursite.com/tags/%E8%8F%9C%E5%8D%95%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo在github pages上面创建个人博客</title>
    <link href="http://yoursite.com/2018/12/25/build-blog-with-hexo-on-github-pages/"/>
    <id>http://yoursite.com/2018/12/25/build-blog-with-hexo-on-github-pages/</id>
    <published>2018-12-24T16:00:00.000Z</published>
    <updated>2018-12-25T09:09:16.109Z</updated>
    
    <content type="html"><![CDATA[<p>流行的建站工具有三款：</p><ol><li><a href="https://jekyllrb.com/" target="_blank" rel="noopener">jekyll</a>，基于ruby语言。</li><li><a href="https://gohugo.io/" target="_blank" rel="noopener">hugo</a>，基于go语言。</li><li><a href="https://hexo.io" target="_blank" rel="noopener">hexo</a>，基于node.js。</li></ol><p>其中hexo在国内用得比较多，有大量的主题。查看github主页，提交最多的是一个台湾人，应该就是创始人了。</p><a id="more"></a><p>流行的建站工具有三款：</p><ol><li><a href="https://jekyllrb.com/" target="_blank" rel="noopener">jekyll</a>，基于ruby语言。</li><li><a href="https://gohugo.io/" target="_blank" rel="noopener">hugo</a>，基于go语言。</li><li><a href="https://hexo.io" target="_blank" rel="noopener">hexo</a>，基于node.js。</li></ol><p>其中hexo在国内用得比较多，有大量的主题。查看github主页，提交最多的是一个台湾人，应该就是创始人了。</p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ol><li>安装git(windows的话可以使用<a href="https://tortoisegit.org/" target="_blank" rel="noopener">tortoise git</a>)</li><li>安装node.js</li></ol><h3 id="hexo安装和建站步骤"><a href="#hexo安装和建站步骤" class="headerlink" title="hexo安装和建站步骤"></a>hexo安装和建站步骤</h3><p>参考<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方文档</a></p><ol><li><p>安装hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></li><li><p>建站</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init hchaojie-blog</span><br><span class="line">cd hchaojie-blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>生成静态页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></li></ol><p>实际上是把<code>&lt;项目根目录&gt;\source\_posts</code> 里面的markdown格式生成了对应的html页面。<br>生成的文件在<code>&lt;项目根目录&gt;\public</code>文件夹里面。</p><ol start="4"><li>本地运行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></li></ol><p>可以通过地址<a href="http://localhost:4000来访问。" target="_blank" rel="noopener">http://localhost:4000来访问。</a></p><h3 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h3><p>默认生成的页面比较丑，你可以到官网选择喜欢的主题：<br><a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题列表</a><br><a href="https://en.abnerchou.me/Blog/5c00ca67/" target="_blank" rel="noopener">10个最受欢迎的主题</a><br><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">hexo-theme-yilia</a><br><a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="noopener">hexo-theme-material</a><br><a href="https://github.com/xaoxuu/hexo-theme-material-x/" target="_blank" rel="noopener">hexo-theme-material-x</a></p><p>我使用的是hexo-theme-yilia，使用步骤：</p><ol><li>安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd themes</span><br><span class="line">git clone https://github.com/litten/hexo-theme-yilia.git yilia</span><br></pre></td></tr></table></figure></li></ol><p>克隆完成之后，将<code>&lt;项目根目录&gt;\themes\material</code>里面的<code>_config.template.yml</code>复制一份并重命名为<code>_config.yml</code>。</p><ol start="2"><li><p>配置<br>修改<code>&lt;项目根目录&gt;\_config.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># theme: landscape 这个是默认的主题，使用#号注释掉</span><br><span class="line">theme: material</span><br></pre></td></tr></table></figure></li><li><p>使用<code>hexo generate</code>重新生成页面</p></li><li><p>错误处理<br>这个主题的代码很久没有更新，安装的时候很可能出错。我安装的时候，报了一个错：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">D:\code\hchaojie-blog\themes\material\layout\_widget\dnsprefetch.ejs:12</span><br><span class="line">    10| &lt;% &#125; %&gt;</span><br><span class="line">    11|</span><br><span class="line"> &gt;&gt; 12| &lt;% if(theme.comment.use === &quot;changyan&quot;) &#123; %&gt;</span><br><span class="line">    13|     &lt;link rel=&quot;dns-prefetch&quot; href=&quot;https://changyan.sohu.com&quot;/&gt;</span><br><span class="line">    14| &lt;% &#125; else if(theme.comment.use === &quot;livere&quot;) &#123; %&gt;</span><br><span class="line">    15|     &lt;link rel=&quot;dns-prefetch&quot; href=&quot;https://cdn-city.livere.com&quot;/&gt;</span><br><span class="line"></span><br><span class="line">Cannot read property &apos;startsWith&apos; of null</span><br></pre></td></tr></table></figure><p>找到dnsprefetch.ejs这个文件，看了一眼21行大概是theme.comment.use为空，<br>只要修改<code>&lt;&gt;项目根目录\themes\material\_config.yml</code>，给use变量设置一个空值即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">comment:</span><br><span class="line">    use: &apos;&apos;</span><br></pre></td></tr></table></figure></p><h3 id="发布到github网站"><a href="#发布到github网站" class="headerlink" title="发布到github网站"></a>发布到github网站</h3><p>前提：你需要有一个github账号。<br>基本步骤：创建一个xxx.github.io的仓库，然后把你的静态页面放到仓库的根目录就可以了。<br>其中xxx是你github的账号名。比如我的是<code>hchaojie</code>，那么我的仓库就是：<code>hchaojie.github.io</code>，我的个人博客访问地址就是<code>https://hchaojie.github.io/</code></p><p>也可以使用hexo的自动发布功能：</p><ol><li>修改<code>&lt;项目根目录&gt;\_config.yml</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: github</span><br><span class="line">  repository: git@github.com:hchaojie/hchaojie.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li></ol><p>注意仓库路径是ssh形式的（以git@开头，而不是https@开头），并且要配置ssh key自动登陆。</p><ol start="2"><li>每次文章更新后的发布步骤：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;流行的建站工具有三款：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jekyll&lt;/a&gt;，基于ruby语言。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gohugo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hugo&lt;/a&gt;，基于go语言。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo&lt;/a&gt;，基于node.js。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中hexo在国内用得比较多，有大量的主题。查看github主页，提交最多的是一个台湾人，应该就是创始人了。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="github pages" scheme="http://yoursite.com/tags/github-pages/"/>
    
  </entry>
  
</feed>
